worker_processes  auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    # Threat files with a unknown filetype as binary
    default_type application/octet-stream;

    log_format  main_timed  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            '$request_time $upstream_response_time $pipe $upstream_cache_status';

    access_log /dev/stdout main_timed;
    error_log /dev/stderr notice;

    keepalive_timeout 65;

    # FastCGI microcaching for WordPress (anonymous traffic)
    # Small, hot cache to drastically reduce PHP load
    fastcgi_cache_path /var/cache/nginx/fastcgi levels=1:2 keys_zone=WORDPRESS_MICRO:32m inactive=5m max_size=256m;
    fastcgi_cache_key "$scheme$request_method$host$request_uri";

    # Bypass cache for logged-in users, POSTs, query strings indicating edits, etc.
    map $request_method $microcache_method_ok {
        default 0;
        GET 1;
        HEAD 1;
    }

    map $http_cookie $microcache_bypass_cookie {
        default 0;
        ~*(wordpress_logged_in_|comment_author|woocommerce_cart_hash|woocommerce_items_in_cart|wp_woocommerce_session_) 1;
    }

    map $query_string $microcache_bypass_query {
        default 0;
        ~*(preview=true|customize_changeset|wc-ajax) 1;
    }

    # Hide headers that identify the server to prevent information leakage
    proxy_hide_header X-Powered-By;
    fastcgi_hide_header X-Powered-By;
    server_tokens off;

    # Enable gzip compression
    gzip on;
    gzip_disable "msie6";
    gzip_proxied any;
    # Based on CloudFlare's recommended settings
    gzip_types text/richtext text/plain text/css text/x-script text/x-component text/x-java-source text/x-markdown application/javascript application/x-javascript text/javascript text/js image/x-icon image/vnd.microsoft.icon application/x-perl application/x-httpd-cgi text/xml application/xml application/rss+xml application/vnd.api+json application/x-protobuf application/json multipart/bag multipart/mixed application/xhtml+xml font/ttf font/otf font/x-woff image/svg+xml application/vnd.ms-fontobject application/ttf application/x-ttf application/otf application/x-otf application/truetype application/opentype application/x-opentype application/font-woff application/eot application/font application/font-sfnt application/wasm application/javascript-binast application/manifest+json application/ld+json application/graphql+json application/geo+json;
    gzip_vary on;

    # Forward the cloudfront scheme from upstream
    map "$http_cloudfront_forwarded_proto$http_x_forwarded_proto" $forwarded_scheme {
         default off;
         "~*(https)" on;
     }

    server {
        listen [::]:80 default_server;
        listen 80 default_server;
        server_name _;

        sendfile off;

        # Increase proxy buffers for large requests
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;

        # Upload limit
        client_max_body_size 50m;
        client_body_buffer_size 128k;

        root /usr/src/wordpress;
        index index.php;

        # redirect server error pages to the static page /50x.html
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /var/lib/nginx/html;
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location = /robots.txt {
            log_not_found off;
            access_log off;
        }

        # Based on https://codeable.io/wordpress-developers-intro-to-docker-part-two/
        location /wp-content {
            root /var/www;
            expires 7d;
            add_header Cache-Control "public";
        }

        location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to index.php
            try_files $uri $uri/ /index.php$is_args$args;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;

            #fastcgi_intercept_errors on;
            fastcgi_buffer_size 128k;
            fastcgi_buffers 4 256k;
            fastcgi_busy_buffers_size 256k;

            fastcgi_index index.php;
            fastcgi_pass 127.0.0.1:9000;

            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;

            # Forward the scheme from upstream
            fastcgi_param HTTPS $forwarded_scheme;

            # Microcache controls
            set $microcache_bypass 0;
            if ($microcache_method_ok = 0) { set $microcache_bypass 1; }
            if ($microcache_bypass_cookie) { set $microcache_bypass 1; }
            if ($microcache_bypass_query) { set $microcache_bypass 1; }

            fastcgi_no_cache $microcache_bypass;
            fastcgi_cache_bypass $microcache_bypass;

            fastcgi_cache WORDPRESS_MICRO;
            fastcgi_cache_valid 200 301 302 3s;
            fastcgi_cache_use_stale error timeout updating http_500 http_503;
            add_header X-Cache-Status $upstream_cache_status;
        }

        # deny access to . files, for security
        location ~ /\. {
            log_not_found off;
            deny all;
        }
    }
}
