[global]
; Log to stderr
error_log = /dev/stderr

[www]
; Enable status page
pm.status_path = /fpm-status

; Use dynamic process manager to keep warm workers and avoid cold-start latency
pm = dynamic

; The number of child processes to be created when pm is set to 'static' and the
; maximum number of child processes when pm is set to 'dynamic' or 'ondemand'.
; This value sets the limit on the number of simultaneous requests that will be
; served. Equivalent to the ApacheMaxClients directive with mpm_prefork.
; Equivalent to the PHP_FCGI_CHILDREN environment variable in the original PHP
; CGI. The below defaults are based on a server without much resources. Don't
; forget to tweak pm.* to fit your needs.
; Note: Used when pm is set to 'static', 'dynamic' or 'ondemand'
; Note: This value is mandatory.
; Max concurrent requests handled by PHP-FPM (configurable via env)
pm.max_children = ${PHP_FPM_MAX_CHILDREN:-75}

; The number of seconds after which an idle process will be killed.
; Initial and spare servers for dynamic PM (configurable via env)
pm.start_servers = ${PHP_FPM_START_SERVERS:-12}
pm.min_spare_servers = ${PHP_FPM_MIN_SPARE_SERVERS:-12}
pm.max_spare_servers = ${PHP_FPM_MAX_SPARE_SERVERS:-24}

; The number of requests each child process should execute before respawning.
; This can be useful to work around memory leaks in 3rd party libraries. For
; endless request processing specify '0'. Equivalent to PHP_FCGI_MAX_REQUESTS.
; Default Value: 0
pm.max_requests = 1000

; Make sure the FPM workers can reach the environment variables for configuration
clear_env = no

; Catch output from PHP
catch_workers_output = yes

; Remove the 'child 10 said into stderr' prefix in the log and only show the actual message
decorate_workers_output = no

; Enable ping page to use in healthcheck
ping.path = /fpm-ping